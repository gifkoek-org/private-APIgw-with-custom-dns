AWSTemplateFormatVersion: '2010-09-09'
Description: api gateway

Parameters:
  RestApiName:
    Description: Name for the API Gateway
    Type: String
    Default: aacorne
  ServiceName:
    Description: Prefix name to identify the service in API Gateway
    Type: String
    Default: aacorne
  ApiGatewayStage:
    Default : dev
    Type: String
  ApiGatewayFriendlyName:
    Description: FQDN friendly name for the API Gateway URL
    Type: String
  ValidationDomain:
    Description: Domain to validate ACM-generated certs against
    Type: String
  HostedZone:
    Description: Personal Route53 hosted zone, to create custom domain name for
    Type: String
  NATgwEip1:
    Description: NAT EIP in production network
    Type: String
    Default: XXX

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Sample API Gateway
      Name: !Ref RestApiName
      EndpointConfiguration:
        Types:
        - REGIONAL
      Policy:
        Version: "2012-10-17"
        Statement:
          # Allow only the specified IP blocks to access the APIgw
          - Effect: Allow
            Action: execute-api:Invoke
            Principal: "*"
            Resource: execute-api:/*
            Condition:
              IpAddress:
                aws:SourceIp:
                - !Ref NATgwEip1

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: !Ref RestApiName

  ResourceMethodGET:
    DependsOn:
    - ApiGatewayResource
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: RestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: GET
      MethodResponses:
      - StatusCode: 200
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
#        mapping template:
#          content-type: application/json
#          template body:


  # the APIgw Deployment resource needs to be "new" every time the stack is updated, otherwise APIgw changes are not
  # deployed. The Jinja variable requires parsing via the j2cli tool during the pipeline to update the value.
  #
  # Setting a deletionpolicy to retain allows us to keep older deployment versions - not strictly required but good
  # for rollback.
  #
  # Don't name the Stage for the deployment explicitly here, but tie the deployment to the stage in the
  # AWS::ApiGateway::Stage resource below
  ApiGatewayDeployment{{ TimeStamp }}:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ResourceMethodGET
    DeletionPolicy: Retain
    Properties:
      Description: foobar {{ TimeStamp }}
      RestApiId: !Ref RestApi
#      StageName: !Ref ApiGatewayStage

  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
    - ApiGatewayDeployment{{ TimeStamp }}
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiGatewayDeployment{{ TimeStamp }}
      StageName: !Ref ApiGatewayStage
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
#          MetricsEnabled: true
#          DataTraceEnabled: true

  ApiGatewayKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: !Sub "aacorne API Gateway key for ${ApiGatewayStage}"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Ref ApiStage

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref RestApi
        Stage: !Ref ApiStage
      Description: !Sub "aacorne API Gateway usage plan for ${ApiGatewayStage}"
#      Quota: QuotaSettings
#      Throttle: ThrottleSettings
#      UsagePlanName: String

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiGatewayKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

  # NOTE: not supported for private APIgw
  ApiGatewayFriendlyDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref ApiGatewayCertificate
      DomainName: !Ref ApiGatewayFriendlyName
      EndpointConfiguration:
        # NOTE: this must correspond with the APIgw config
        Types:
          - REGIONAL

  # wildcard certificate for the cluster's ALB
  # not required if we're not using custom names
  ApiGatewayCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiGatewayFriendlyName
      DomainValidationOptions:
        - DomainName: !Ref ApiGatewayFriendlyName
          ValidationDomain: !Ref ValidationDomain

  # Route53 CNAME record for the service
  ServiceDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZone
      AliasTarget:
        # note these attributes returned from the custom domain name resource
        DNSName: !GetAtt ApiGatewayFriendlyDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayFriendlyDomainName.RegionalHostedZoneId
      # create CNAME in the form service-stage.hostedzone
      # does this have to correspond to the AWS::ApiGateway::DomainName resource?
      Name: !Join ["", [!Ref ServiceName, "-", !Ref ApiGatewayStage, ".", !Ref HostedZone]]
      Type: A

Outputs:
  ApiGatewayUrl:
    Description: System-generated URL of the API gateway
    Value: !Join ['', ["https://", !Ref RestApi, ".execute-api.", !Sub "${AWS::Region}", ".amazonaws.com"]]

  ApiGatewayFriendlyName:
    Description: Friendly name for the API Gateway
    Value: !Ref ServiceDNSRecord
